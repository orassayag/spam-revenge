Completed + canceled tasks:
===========================
-Update packages + Recreate package-lock.json. *
-Remove code comments to a backup TXT file. *
-Due to the break changes of log-update packages, there is a need to use the 'postinstall' script to fix the direct file: *
1. Remove the 'wrap-ansi', 'slice-ansi', 'cli-cursor', 'ansi-escapes' packages from the 'package.json' file. *
2. Delete the 'log-update' directory. *
3. Install the original 'log-update' package. *
4. Change in the 'log.utils' file to use the 'require('log-update');' syntax. *
5. Add the postinstall script, add the 'script/initiate.js' file. *
6. Add the 'INITIATE' key/value to the ScriptType enum. *
7. Add the 'postinstall' script to the 'package.json file'. *
8. Run in the terminal 'npm i' + Recreate the 'package-lock.json' file. *
9. Format the 2 files. *
10. Make sure all work as expected. *
-Update packages + Recreate package-lock.json. *
-Remove code comments to a backup TXT file. *
-Convert " to ' in the relevant places. *
-Remove all 'debugger' keywords. *
-Recheck error numbers in error_index.txt. *
-Check 'let' needs to be converted to 'const'. *
-Check places to change from simple parameters with dynamic objects to classes. *
-Make sure all comments '//' have: 1. space 2. ends with a dot. *
-Make sure 'id' => 'Id', 'url' => 'URL', 'api' => 'API'. *
-Make sure spaces in all files between bottom, need to fix cases like this: *
} *
module.exports *
} *
export default *
-Change all '.length > 0' to 'isExists'. *
-Change all (where it's possible) from 'console.log' to 'logUtils.log'. *
-Remove duplicate import/require (convert to index.js if possible). *
-Sort alphabetically all the imports/requires by https://alphabetizer.flap.tv/. *
-Sort alphabetically all the imports/requires: external packages, settings, (containers, components, store, assert) *
data, models, enums, services, utils. *
-File extensions should be upper case: JSON, TXT, etc. *
-Remove the space lines inside methods and functions. *
-Remove the duplicate empty lines: \n\s*\n\s*\n *
-Remove the first empty line: ^(?<![\s])\n *
-Remove the last empty line: \n\s*$(?!\n) *
-Detect all comments without a dot at the end: ^// .*(?<!\.)$ *
-Make sure all switch-case have curly braces. *
-Clear unused enums and make sure all in used really exists - Canceled. *
-Search for 'async ' and create a list of functions/methods, and make sure that all calls have await. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-Do all the 'ToDo' tasks - Canceled. *
-Format all documents. *
-Verify all works well. *
-Change 'misc/backups' to 'misc/backup'. *
-Make sure all switch-case have curly braces. *
-Scan all files for spell mistakes with the 'files-spell-checker' project. *
-In the 'package.json' file change to 'private: false'. *
-Convert in all places from all versions of canceled keyword to 'Canceled' keyword. *
-Add in all places 'name.model' to all models. *
-Check that in all places the name of the file includes the name of tha parent directory. For example: name.model inside 'models' directory. *
-Don't forget to do the same rename logic for all the enums in the project. *
-Replace the 'getCurrentDate' method with the updated one from the 'udemy-courses' project. *
-Change in all places the config from 'misc/backup' to 'misc/backups' directory. *
-Remove code comments to a backup TXT file. *
-Take the latest settings from '.vscode/settings.json' and implement them. *
-Change in all places that globalUtils will be on top. *
-Copy the '.eslintignore' file from the 'udemy-courses' project. *
-Add to the 'package.json' file (below the 'description' field) the 'repository' field: *
"repository": { *
  "type": "git", *
  "url": "git://github.com/username/repository.git" *
} *
-Add comment in INSTRUCTIONS.md and in the 'README.md' files that the project is not complete yet. *
-Move all tasks here to new file - 'future_tasks.txt'. *
-Fix TXT files spell mistakes via Gmail (Also, convert '_' to ' ' in all places when checking). *
-Move all complete tasks from here to complete_tasks.txt. *
-Upload to GitHub. *
-Backup to iOmega. *
-Fix all spell mistakes via Gmail. *
-Upload to GitHub. *
-Update iOmega. *
===[LOCAL] Local IP: 172.45.323.12 | Public IP: 82.34.234.72 | Other IPs: | | | === *
-Set maximum retries for searching proxy. *
-Add maximum limit of trying to find a proxy, after that exit the program. *
-Add flag to use proxy or not. If not, don't need local data, and proxy random, just subscribe logic. *
-Add validation that if PRODUCTION and this flag is false, exit. *
-Second logic - Find a working proxy and test it. Validate all IP addresses and ports + Make sure not any of *
 local or public IP addresses are included in any header of the proxy. *
-If the proxy is not working - Random another one and repeat the process of validation. Random the proxies from different sources. *
-If it works - Start the third part. *
-Check for duplicates: *
1. Duplicate email addresses - Remove. *
2. Duplicate subscribes - Mark with status DUPLICATE (take the duplicate detect logic from udemy-courses project). *
-Add option to ignore email addresses or/and ignore subscribe URLs. *
-Add retry on validate internet connection + number of times from settings.js (check if previous project has the logic to copy from). *
-Make a JSON file full with spam URLs - Validate all to have: *
-URL (valid URL), Text box field name, text box field value, button field name, button field value (id will be given automatically). *
-The JSON file needs to be external - A path in the settings to validate (validate it's a file path). *
-Place the JSON file inside 'sources' directory, and refer to the path in settings.js there. *
-Update packages. *
-Validate subscription list. *
-Add maximum limit of email addresses and subscribes - If exceeded - take first X. Add it to settings.js. *
-Include maximum count of spam subscription, and if by order or random. *
-Clear duplicate email addresses. *
-Add relevant status for each subscribe: *
NO_DATA/MISSING_URL/EMPTY_URL/INVALID_URL/MISSING_TEXTBOX_FIELD/EMPTY_TEXTBOX_FIELD/MISSING_TEXTBOX_VALUE/ *
EMPTY_TEXTBOX_VALUE/MISSING_BUTTON_FIELD/EMPTY_BUTTON_FIELD/MISSING_BUTTON_VALUE/EMPTY_BUTTON_VALUE/ *
URL_NOT_FOUND/TEXTBOX_NOT_FOUND/BUTTON_NOT_FOUND/MISSING_FIELD/UNEXPECTED_FIELD *
-Update console status log structure. *
-Update statuses in each step on the main JavaScript script. *
-Replace 'ip-regex' package with regex + remove this package from package.json. *
-No log writing operations need to be included. *
-Validate target email addresses. *
-Add validation on specific email addresses from settings. *
-Add validation on the target email addresses. *
-Validate URLs. *
-First logic - Get local private IP addresses + Get local public IP address. Validate all IP addresses. *
-Make the backup script work. *
-Move the project back to udemy-courses project template. *
-Add the git init command - Start to work with git. *
-Manually backup. *
-Remove unneeded settings. *
-Add the .git + sources to the ignore directories of the backup process. *
-Remove all unneeded code. *